// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.1
// source: topUpPhoneBalancePattern.proto

package v1

import (
	context "context"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Pattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PhoneNumber string               `protobuf:"bytes,3,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	Created     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Updated     *timestamp.Timestamp `protobuf:"bytes,5,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *Pattern) Reset() {
	*x = Pattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topUpPhoneBalancePattern_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pattern) ProtoMessage() {}

func (x *Pattern) ProtoReflect() protoreflect.Message {
	mi := &file_topUpPhoneBalancePattern_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pattern.ProtoReflect.Descriptor instead.
func (*Pattern) Descriptor() ([]byte, []int) {
	return file_topUpPhoneBalancePattern_proto_rawDescGZIP(), []int{0}
}

func (x *Pattern) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pattern) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Pattern) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Pattern) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Pattern) GetUpdated() *timestamp.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type AllPatternsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patterns []*Pattern `protobuf:"bytes,1,rep,name=patterns,proto3" json:"patterns,omitempty"`
}

func (x *AllPatternsResponse) Reset() {
	*x = AllPatternsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topUpPhoneBalancePattern_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllPatternsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllPatternsResponse) ProtoMessage() {}

func (x *AllPatternsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_topUpPhoneBalancePattern_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllPatternsResponse.ProtoReflect.Descriptor instead.
func (*AllPatternsResponse) Descriptor() ([]byte, []int) {
	return file_topUpPhoneBalancePattern_proto_rawDescGZIP(), []int{1}
}

func (x *AllPatternsResponse) GetPatterns() []*Pattern {
	if x != nil {
		return x.Patterns
	}
	return nil
}

type PatternResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompletedSuccesfully bool `protobuf:"varint,1,opt,name=completedSuccesfully,proto3" json:"completedSuccesfully,omitempty"`
}

func (x *PatternResponse) Reset() {
	*x = PatternResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topUpPhoneBalancePattern_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternResponse) ProtoMessage() {}

func (x *PatternResponse) ProtoReflect() protoreflect.Message {
	mi := &file_topUpPhoneBalancePattern_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternResponse.ProtoReflect.Descriptor instead.
func (*PatternResponse) Descriptor() ([]byte, []int) {
	return file_topUpPhoneBalancePattern_proto_rawDescGZIP(), []int{2}
}

func (x *PatternResponse) GetCompletedSuccesfully() bool {
	if x != nil {
		return x.CompletedSuccesfully
	}
	return false
}

type PatternId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PatternId) Reset() {
	*x = PatternId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topUpPhoneBalancePattern_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternId) ProtoMessage() {}

func (x *PatternId) ProtoReflect() protoreflect.Message {
	mi := &file_topUpPhoneBalancePattern_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternId.ProtoReflect.Descriptor instead.
func (*PatternId) Descriptor() ([]byte, []int) {
	return file_topUpPhoneBalancePattern_proto_rawDescGZIP(), []int{3}
}

func (x *PatternId) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_topUpPhoneBalancePattern_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_topUpPhoneBalancePattern_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_topUpPhoneBalancePattern_proto_rawDescGZIP(), []int{4}
}

var File_topUpPhoneBalancePattern_proto protoreflect.FileDescriptor

var file_topUpPhoneBalancePattern_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x74, 0x6f, 0x70, 0x55, 0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x26, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x74, 0x6f, 0x70,
	0x55, 0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x01, 0x0a, 0x07, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x62, 0x0a, 0x13, 0x41, 0x6c, 0x6c,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x74, 0x6f, 0x70, 0x55, 0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x52, 0x08, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x22, 0x45, 0x0a,
	0x0f, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x22, 0x1b, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x89, 0x05, 0x0a, 0x1a, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x79, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x2f, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x74,
	0x6f, 0x70, 0x55, 0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x1a, 0x37, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x74, 0x6f, 0x70, 0x55, 0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x34,
	0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x74, 0x6f, 0x70, 0x55,
	0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x74, 0x6f, 0x70, 0x55, 0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c,
	0x6c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x74, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x31, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x74, 0x6f, 0x70, 0x55, 0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x49, 0x64, 0x1a, 0x2f, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x74, 0x6f, 0x70, 0x55, 0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x7a, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x2f, 0x2e, 0x62, 0x61, 0x6e, 0x6b,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x74, 0x6f, 0x70, 0x55, 0x70, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x1a, 0x37, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x74, 0x6f, 0x70, 0x55, 0x70, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x31, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x74,
	0x6f, 0x70, 0x55, 0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x49, 0x64, 0x1a, 0x37, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x74, 0x6f, 0x70, 0x55, 0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2d, 0x5a,
	0x2b, 0x42, 0x61, 0x6e, 0x6b, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x74, 0x6f, 0x70, 0x55, 0x70, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_topUpPhoneBalancePattern_proto_rawDescOnce sync.Once
	file_topUpPhoneBalancePattern_proto_rawDescData = file_topUpPhoneBalancePattern_proto_rawDesc
)

func file_topUpPhoneBalancePattern_proto_rawDescGZIP() []byte {
	file_topUpPhoneBalancePattern_proto_rawDescOnce.Do(func() {
		file_topUpPhoneBalancePattern_proto_rawDescData = protoimpl.X.CompressGZIP(file_topUpPhoneBalancePattern_proto_rawDescData)
	})
	return file_topUpPhoneBalancePattern_proto_rawDescData
}

var file_topUpPhoneBalancePattern_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_topUpPhoneBalancePattern_proto_goTypes = []interface{}{
	(*Pattern)(nil),             // 0: bankSystem.topUpPhoneBalancePattern.v1.Pattern
	(*AllPatternsResponse)(nil), // 1: bankSystem.topUpPhoneBalancePattern.v1.AllPatternsResponse
	(*PatternResponse)(nil),     // 2: bankSystem.topUpPhoneBalancePattern.v1.PatternResponse
	(*PatternId)(nil),           // 3: bankSystem.topUpPhoneBalancePattern.v1.PatternId
	(*EmptyRequest)(nil),        // 4: bankSystem.topUpPhoneBalancePattern.v1.EmptyRequest
	(*timestamp.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_topUpPhoneBalancePattern_proto_depIdxs = []int32{
	5, // 0: bankSystem.topUpPhoneBalancePattern.v1.Pattern.created:type_name -> google.protobuf.Timestamp
	5, // 1: bankSystem.topUpPhoneBalancePattern.v1.Pattern.updated:type_name -> google.protobuf.Timestamp
	0, // 2: bankSystem.topUpPhoneBalancePattern.v1.AllPatternsResponse.patterns:type_name -> bankSystem.topUpPhoneBalancePattern.v1.Pattern
	0, // 3: bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService.CreatePattern:input_type -> bankSystem.topUpPhoneBalancePattern.v1.Pattern
	4, // 4: bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService.GetAllPatterns:input_type -> bankSystem.topUpPhoneBalancePattern.v1.EmptyRequest
	3, // 5: bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService.GetPatternById:input_type -> bankSystem.topUpPhoneBalancePattern.v1.PatternId
	0, // 6: bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService.EditPatterById:input_type -> bankSystem.topUpPhoneBalancePattern.v1.Pattern
	3, // 7: bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService.DeleteById:input_type -> bankSystem.topUpPhoneBalancePattern.v1.PatternId
	2, // 8: bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService.CreatePattern:output_type -> bankSystem.topUpPhoneBalancePattern.v1.PatternResponse
	1, // 9: bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService.GetAllPatterns:output_type -> bankSystem.topUpPhoneBalancePattern.v1.AllPatternsResponse
	0, // 10: bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService.GetPatternById:output_type -> bankSystem.topUpPhoneBalancePattern.v1.Pattern
	2, // 11: bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService.EditPatterById:output_type -> bankSystem.topUpPhoneBalancePattern.v1.PatternResponse
	2, // 12: bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService.DeleteById:output_type -> bankSystem.topUpPhoneBalancePattern.v1.PatternResponse
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_topUpPhoneBalancePattern_proto_init() }
func file_topUpPhoneBalancePattern_proto_init() {
	if File_topUpPhoneBalancePattern_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_topUpPhoneBalancePattern_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_topUpPhoneBalancePattern_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllPatternsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_topUpPhoneBalancePattern_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_topUpPhoneBalancePattern_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_topUpPhoneBalancePattern_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_topUpPhoneBalancePattern_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_topUpPhoneBalancePattern_proto_goTypes,
		DependencyIndexes: file_topUpPhoneBalancePattern_proto_depIdxs,
		MessageInfos:      file_topUpPhoneBalancePattern_proto_msgTypes,
	}.Build()
	File_topUpPhoneBalancePattern_proto = out.File
	file_topUpPhoneBalancePattern_proto_rawDesc = nil
	file_topUpPhoneBalancePattern_proto_goTypes = nil
	file_topUpPhoneBalancePattern_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PhoneBalancePatternServiceClient is the client API for PhoneBalancePatternService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PhoneBalancePatternServiceClient interface {
	CreatePattern(ctx context.Context, in *Pattern, opts ...grpc.CallOption) (*PatternResponse, error)
	GetAllPatterns(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllPatternsResponse, error)
	GetPatternById(ctx context.Context, in *PatternId, opts ...grpc.CallOption) (*Pattern, error)
	EditPatterById(ctx context.Context, in *Pattern, opts ...grpc.CallOption) (*PatternResponse, error)
	DeleteById(ctx context.Context, in *PatternId, opts ...grpc.CallOption) (*PatternResponse, error)
}

type phoneBalancePatternServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPhoneBalancePatternServiceClient(cc grpc.ClientConnInterface) PhoneBalancePatternServiceClient {
	return &phoneBalancePatternServiceClient{cc}
}

func (c *phoneBalancePatternServiceClient) CreatePattern(ctx context.Context, in *Pattern, opts ...grpc.CallOption) (*PatternResponse, error) {
	out := new(PatternResponse)
	err := c.cc.Invoke(ctx, "/bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService/CreatePattern", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneBalancePatternServiceClient) GetAllPatterns(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllPatternsResponse, error) {
	out := new(AllPatternsResponse)
	err := c.cc.Invoke(ctx, "/bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService/GetAllPatterns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneBalancePatternServiceClient) GetPatternById(ctx context.Context, in *PatternId, opts ...grpc.CallOption) (*Pattern, error) {
	out := new(Pattern)
	err := c.cc.Invoke(ctx, "/bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService/GetPatternById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneBalancePatternServiceClient) EditPatterById(ctx context.Context, in *Pattern, opts ...grpc.CallOption) (*PatternResponse, error) {
	out := new(PatternResponse)
	err := c.cc.Invoke(ctx, "/bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService/EditPatterById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneBalancePatternServiceClient) DeleteById(ctx context.Context, in *PatternId, opts ...grpc.CallOption) (*PatternResponse, error) {
	out := new(PatternResponse)
	err := c.cc.Invoke(ctx, "/bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService/DeleteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhoneBalancePatternServiceServer is the server API for PhoneBalancePatternService service.
type PhoneBalancePatternServiceServer interface {
	CreatePattern(context.Context, *Pattern) (*PatternResponse, error)
	GetAllPatterns(context.Context, *EmptyRequest) (*AllPatternsResponse, error)
	GetPatternById(context.Context, *PatternId) (*Pattern, error)
	EditPatterById(context.Context, *Pattern) (*PatternResponse, error)
	DeleteById(context.Context, *PatternId) (*PatternResponse, error)
}

// UnimplementedPhoneBalancePatternServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPhoneBalancePatternServiceServer struct {
}

func (*UnimplementedPhoneBalancePatternServiceServer) CreatePattern(context.Context, *Pattern) (*PatternResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePattern not implemented")
}
func (*UnimplementedPhoneBalancePatternServiceServer) GetAllPatterns(context.Context, *EmptyRequest) (*AllPatternsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPatterns not implemented")
}
func (*UnimplementedPhoneBalancePatternServiceServer) GetPatternById(context.Context, *PatternId) (*Pattern, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatternById not implemented")
}
func (*UnimplementedPhoneBalancePatternServiceServer) EditPatterById(context.Context, *Pattern) (*PatternResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPatterById not implemented")
}
func (*UnimplementedPhoneBalancePatternServiceServer) DeleteById(context.Context, *PatternId) (*PatternResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteById not implemented")
}

func RegisterPhoneBalancePatternServiceServer(s *grpc.Server, srv PhoneBalancePatternServiceServer) {
	s.RegisterService(&_PhoneBalancePatternService_serviceDesc, srv)
}

func _PhoneBalancePatternService_CreatePattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pattern)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneBalancePatternServiceServer).CreatePattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService/CreatePattern",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneBalancePatternServiceServer).CreatePattern(ctx, req.(*Pattern))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneBalancePatternService_GetAllPatterns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneBalancePatternServiceServer).GetAllPatterns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService/GetAllPatterns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneBalancePatternServiceServer).GetAllPatterns(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneBalancePatternService_GetPatternById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatternId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneBalancePatternServiceServer).GetPatternById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService/GetPatternById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneBalancePatternServiceServer).GetPatternById(ctx, req.(*PatternId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneBalancePatternService_EditPatterById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pattern)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneBalancePatternServiceServer).EditPatterById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService/EditPatterById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneBalancePatternServiceServer).EditPatterById(ctx, req.(*Pattern))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneBalancePatternService_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatternId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneBalancePatternServiceServer).DeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService/DeleteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneBalancePatternServiceServer).DeleteById(ctx, req.(*PatternId))
	}
	return interceptor(ctx, in, info, handler)
}

var _PhoneBalancePatternService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bankSystem.topUpPhoneBalancePattern.v1.PhoneBalancePatternService",
	HandlerType: (*PhoneBalancePatternServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePattern",
			Handler:    _PhoneBalancePatternService_CreatePattern_Handler,
		},
		{
			MethodName: "GetAllPatterns",
			Handler:    _PhoneBalancePatternService_GetAllPatterns_Handler,
		},
		{
			MethodName: "GetPatternById",
			Handler:    _PhoneBalancePatternService_GetPatternById_Handler,
		},
		{
			MethodName: "EditPatterById",
			Handler:    _PhoneBalancePatternService_EditPatterById_Handler,
		},
		{
			MethodName: "DeleteById",
			Handler:    _PhoneBalancePatternService_DeleteById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topUpPhoneBalancePattern.proto",
}
